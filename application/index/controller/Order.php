<?php
/**
 * Created by PhpStorm.
 * User: tgy
 * Date: 2017/12/9
 * Time: 17:34
 */
namespace app\index\controller;
require_once __DIR__."/../lib/WxPay.Data.php";
require_once __DIR__."/../lib/WxPay.Api.php";
use app\index\model\Comment;
use app\index\model\User;
use QCloud_WeApp_SDK\Constants;
use think\Db;
use think\Exception;
use think\Request;
use \app\index\model\Order as OrderModel;
use QCloud_WeApp_SDK\Auth\LoginService as LoginService;
use think\Log as log;
use WxPayApi;
use WxPayConfig;
use WxPayUnifiedOrder;

class Order extends Base{
    function _initialize(){
        parent::_initialize(); // TODO: Change the autogenerated stub

    }

    public function post(){
        //        $check = LoginService::check();
//        if($check !== Constants::E_AUTH){
//            return msg('', 1, $check["error"]);
//        }
        $data = Request::instance()->param();
        $model = new OrderModel();
        try{
            self::checkData($data);
            Db::startTrans();
            $data["consignee_id"] = 2;
            $data['order_sn'] = getOrderSN();
            $data['create_time'] = date('Y-m-d H:i:s');
            $this->generateData($data);
            do{
                $result = $model->allowField(true)->save($data);
            }
            while(!$model->id);
            Db::commit();
        }catch (Exception $e){
            Db::rollback();
            return msg('', 1, $e->getMessage());
        }
        if($model->id){
            return msg($model);
        }
        return msg('', 1, "下单失败");
    }
    public function get(){
//        $check = LoginService::check();
//        if($check !== Constants::E_AUTH){
//            return msg('', 1, $check["error"]);
//        }
        $param = Request::instance()->param();
        $userModel = new User();
        $user_id = $userModel->getUserId();
        $page = isset($param["page"]) ? $param["page"] : 1;
        $limit = isset($param["limit"]) ? $param["limit"] : 10;
        $model = new OrderModel($param);
        $where = "service_id={$user_id} or consignee_id={$user_id}";
        $result = $model->getByWhere($where, $page, $limit);
        $result = objToArray($result);
        foreach ($result["list"] as &$item){
            log::error($item);
            $this->getOrderUserInfo($user_id, $userModel, $item);
        }
        return msg($result);
    }
    public function getOrder($order_sn){
        $userModel = new User();
        $user_id = $userModel->getUserId();
        $model = new OrderModel();
        $result = $model->where('order_sn', $order_sn)->find();
        if(empty($result)){
            return msg("", 1, "订单不存在");
        }
        $result = objToArray($result);

        $comment = new Comment();
        $comment = $comment->where("order_id", $result["id"])->find();
        $comment = objToArray($comment);
        $result["star"] = $comment["star"];
        $result["comment_id"] = $comment["id"];
        $result["content"] = $comment["content"];
        $this->getOrderUserInfo($user_id, $userModel, $result);
        return msg($result);
    }

    function getOrderUserInfo($user_id, $userModel, &$item){
        $other_id = intval($user_id) == $item["service_id"] ? $item["consignee_id"] : $user_id;
        $user = $userModel->getUserSampleInfo($other_id);
        $item["nickName"] = $user["nickName"];
        $item["avatarUrl"] = $user['avatarUrl'];
    }
    public function action($order_sn){
        $param = Request::instance()->param();
        if(!isset($param["action"])){
            return msg("", 1, "参数不正确");
        }
        $user_id = 2;
        $model = new OrderModel();
        $order = $model->where("order_sn", $order_sn)->where("service_id|consignee_id", "=", $user_id)->find();
        if(!$order){
            return msg("", 1, "订单不存在");
        }
        switch($param["action"]){
            case "sure": //确认订单
                $order->order_status = 1;
                break;
            case "cancel": //取消订单
                $order->order_status = 2;
                break;
            case "start_service": // 开始服务
                $order->service_status = 1;
                break;
            case "end_service": //结束服务
                $order->service_status = 2;
                break;
            default:
                return msg("", 1, "参数不正确");
        }
        $order->save();
        return msg("");

    }
    function checkData($data){
        $message_for_check = "";
        if(!isset($data['service_id'])){
            $message_for_check .= "service_id缺失 ";
        }
        if(!isset($data['consignee_id'])){
            $message_for_check .= "consignee_id缺失 ";
        }
        if(!isset($data['order_amount'])){
            $message_for_check .= "order_amount缺失 ";
        }
        if($message_for_check){
            throw new Exception($message_for_check);
        }
    }
    function generateData($data){
        $user = model('User');
        $result = $user->where('id', $data['service_id'])->find();
        $product_price = $result->price;
        $order_amount = $product_price * $data['product_total'];
        if(abs($order_amount-$data['order_amount']) > 0.001){
            throw new Exception("订单金额不正确");
        }
        // 红包
    }
    function unifiedOrder(){
        $openId = "";
        $input = new WxPayUnifiedOrder();
        $input->SetBody("test");
        $input->SetAttach("test");
        $input->SetOut_trade_no(WxPayConfig::MCHID.date("YmdHis"));
        $input->SetTotal_fee("1");
        $input->SetTime_start(date("YmdHis"));
        $input->SetTime_expire(date("YmdHis", time() + 600));
        $input->SetGoods_tag("test");
        $input->SetNotify_url("http://paysdk.weixin.qq.com/example/notify.php");
        $input->SetTrade_type("JSAPI");
        $input->SetOpenid($openId);
        $order = WxPayApi::unifiedOrder($input);
        log::error($order);
    }
}